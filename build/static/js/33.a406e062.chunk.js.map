{"version":3,"file":"static/js/33.a406e062.chunk.js","mappings":"sKAyBA,UApBA,SAAaA,GACT,IAAOC,GAAQC,EAAAA,EAAAA,KAARD,KACP,GAA0BE,EAAAA,EAAAA,GAAiB,WAAY,CAAC,gBAAgB,iBAAiBF,EAAKG,MAAvFC,EAAS,EAATA,UAWP,OAXsB,EAALC,OAEjBC,EAAAA,EAAAA,YAAU,WAGNC,QAAQC,IAAI,oCAAWJ,GACvBG,QAAQC,IAAI,SAASR,GACrBO,QAAQC,IAAI,uBAAQR,EAAKS,OACzBF,QAAQC,IAAI,uBAAQR,EAAKU,YAC7B,GAAE,KAGE,8BAAE,oBAIV,C,qHCfaR,EAAmB,SAACS,EAAaC,GAAuB,IAAdC,EAAM,UAAD,6CAAC,GAGzD,GAAkCC,EAAAA,EAAAA,UAAS,MAAK,eAAzCV,EAAS,KAAEW,EAAY,KAC9B,GAA0BD,EAAAA,EAAAA,UAAS,MAAK,eAAjCT,EAAK,KAAEW,EAAQ,KAqCtB,OAlCAV,EAAAA,EAAAA,YAAU,WACN,IAAIW,EAEAA,EADDJ,EAAMK,OAAO,GACRC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcV,GAAaW,EAAAA,GAAAA,WAAM,GAAD,OAAIV,KAASW,EAAAA,EAAAA,IAAQ,cAAc,UAGpFJ,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcV,GAAaW,EAAAA,GAAAA,WAAM,GAAD,OAAIV,KAG7DL,QAAQC,IAAIS,GAGZ,IAAMO,GAAcC,EAAAA,EAAAA,IAAWb,EAAUK,GAAKG,EAAAA,EAAAA,IAAWC,EAAAA,GAAcV,IAGnE,SAACe,GACG,IAAIC,EAAS,GAEbD,EAASE,KAAKC,SAAQ,SAACC,GAEnBH,EAAOI,MAAK,kBAAKD,EAAIE,QAAM,IAAEC,GAAIH,EAAIG,KACzC,IACA1B,QAAQC,IAAImB,GACZZ,EAAaY,GACbX,EAAS,KACb,IACA,SAACX,GACGW,EAASX,EAAM6B,QACnB,IAGJ,OAAOV,CAEX,GAAG,CAACJ,EAAAA,KACG,CAAEhB,UAAAA,EAAWC,MAAAA,EACxB,C","sources":["components/Log.js","hooks/useCollectionDtl.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useEffect } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\n\r\nfunction Log(props) {\r\n    const {user} = useAuthContext()\r\n    const {documents,error} = useCollectionDtl(\"FeedData\", [\"peopleWhoLike\",\"array-contains\",user.uid] );\r\n\r\n    useEffect(()=>{\r\n        // 내가 좋아요 누른 게시물만 보이게\r\n        // 앞단에서 정렬 ㄱㄱ\r\n        console.log(\"좋아하는 글 :\",documents)\r\n        console.log(\"user :\",user)\r\n        console.log(\"이메일 :\",user.email)\r\n        console.log(\"닉네임 :\",user.displayName)\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            LOG 보자\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Log;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["props","user","useAuthContext","useCollectionDtl","uid","documents","error","useEffect","console","log","email","displayName","transaction","myQuery","order","useState","setDocuments","setError","q","length","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","id","message"],"sourceRoot":""}