{"version":3,"file":"static/js/86.818dda80.chunk.js","mappings":"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","sources":["components/Input.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport {useEffect, useState} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { setUserEmail, setUID, setPostText, setVisible, setDisplayName } from \"../store/inputSlice\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\n\r\nfunction Input(){\r\n    \r\n    const inputState = useSelector((state) => state.inputState)\r\n    const { isAuthReady, user } = useAuthContext();\r\n    let dispatch = useDispatch()\r\n    let [showImg, setShowImg] = useState('')\r\n    let [saveImg, setSaveImg] = useState('')\r\n    \r\n    /**************************************************************\r\n     * 글 저장\r\n     **************************************************************/\r\n    // 컬렉션 이름 파라미터로 넣어주기, 저장소에 해당 이름의 컬렉션으로 저장됨\r\n    const { addDocument, response } = useFirestore(\"FeedData\");\r\n    \r\n    // 인풋 타입에 따라 state 값을 변경\r\n    const onChange = (e) => {\r\n        const inputData = {\r\n            type: e.target.type,\r\n            value: e.target.value\r\n        }\r\n        if (inputData.type === 'text') {\r\n            dispatch(setPostText(inputData.value))\r\n        } else {\r\n            // 이미지 미리보기, 실물파일 저장\r\n            setPreviewImg(e)\r\n        }\r\n    }\r\n\r\n\r\n    // 이미지 value 값 넣기\r\n    // 이미지 미리보기\r\n    const setPreviewImg = (e) => {\r\n\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = function(e) {\r\n            setShowImg(e.target.result);\r\n        };\r\n\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        setSaveImg(e.target.files[0]);\r\n        console.log(e.target.files[0]);\r\n\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        // mount\r\n        console.log(user);   \r\n        dispatch(setUserEmail(user.email))\r\n        dispatch(setUID(user.uid))\r\n        dispatch(setDisplayName(user.displayName))\r\n        \r\n        // unmount 시 초기화\r\n        return () => {\r\n            dispatch(setVisible(false))\r\n            dispatch(setPostText(''))\r\n            dispatch(setUserEmail(''))\r\n            dispatch(setUID(''))\r\n        }\r\n    },[])\r\n\r\n\r\n    // 폼이 제출되면 실행 [게시물 등록]\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        let savedData = {...inputState}\r\n        // 저장 시 없는 데이터 추가로 넣어주기\r\n        savedData.likes = 0\r\n        savedData.replies = 0\r\n        // 프로필 이미지도 등록해야되는데...\r\n        savedData.profileImage = '/assets/profile_default.png' // 기본 프로필 이미지로 들어가도록\r\n        savedData.peopleWhoLike = []\r\n        savedData.peopleWhoReply = []\r\n\r\n        console.log(\"게시할 Data :\",savedData);\r\n\r\n        // [FireBase 저장 로직]\r\n        addDocument( savedData ,saveImg) //저장\r\n        dispatch(setVisible(false))\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n            <div className=\"dimmed-layer\"/>\r\n\r\n            <div className=\"input-area\">\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <h3>새 게시물 만들기</h3>\r\n                        <div className=\"form-group\">\r\n                            <input accept=\"image/jpeg,image/png,image/heic,image/heif,video/mp4,video/quicktime\" className=\"img-input\" multiple=\"\" type=\"file\" onChange={onChange} required/>\r\n                        </div>\r\n\r\n                        {/* 이미지 미리보기 */}\r\n                        { showImg.length > 0 && <img src={showImg ?? showImg} alt=\"\" style={{marginBottom : '13px',width : '80%', maxHeight:'200px'}}/>}\r\n                        \r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" value={inputState.postText} onChange={onChange} className=\"form-control\" name=\"postText\" placeholder=\"문구 입력\" required/>\r\n                        </div>\r\n                        <input type=\"submit\" className=\"post-btn\" value=\"공유하기\"/>\r\n                        <div className=\"close-btn\">\r\n                            <CloseBtn onClick={(e)=>{\r\n                                e.preventDefault()\r\n                                dispatch(setVisible(false))\r\n                            }}/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n\r\n\r\nconst CloseBtn = (props) => (\r\n    <svg\r\n        // width=\"800px\"\r\n        // height=\"800px\"\r\n        viewBox=\"0 0 16 16\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        {...props}\r\n    >\r\n    <title>{\"close\"}</title>\r\n    <path\r\n      fill=\"#FFFFFF\"\r\n      d=\"M12.78 4.28a.75.75 0 00-1.06-1.06L8 6.94 4.28 3.22a.75.75 0 00-1.06 1.06L6.94 8l-3.72 3.72a.75.75 0 101.06 1.06L8 9.06l3.72 3.72a.75.75 0 101.06-1.06L9.06 8l3.72-3.72z\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer,useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc,updateDoc, deleteDoc,doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable,getDownloadURL } from \"firebase/storage\";\r\nimport  {GetCurDayTime ,GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *      파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl,setImgUrl] = useState([]);\r\n    // colRef : 만들 컬랙션의 참조 (컬랙션 이름)\r\n\t\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬랙션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument,addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["inputState","useSelector","state","useAuthContext","user","isAuthReady","dispatch","useDispatch","useState","showImg","setShowImg","saveImg","setSaveImg","useFirestore","addDocument","onChange","response","e","inputData","type","target","value","setPostText","setPreviewImg","reader","FileReader","onload","result","readAsDataURL","files","console","log","useEffect","setUserEmail","email","setUID","uid","setDisplayName","displayName","setVisible","className","onSubmit","preventDefault","savedData","likes","replies","profileImage","peopleWhoLike","peopleWhoReply","accept","multiple","required","length","src","alt","style","marginBottom","width","maxHeight","postText","name","placeholder","CloseBtn","onClick","props","viewBox","xmlns","fill","d","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","isPending","error","success","storeReducer","action","payload","transaction","useReducer","colRef","collection","appFireStore","doc","pic","createdTime","timestamp","createdDate","createdUqe","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","getDownloadURL","then","downloadURL","docRef","addDoc","message","addComment","editDocument","documents","id","updateDoc","deleteDocument","deleteDoc","addUser"],"sourceRoot":""}